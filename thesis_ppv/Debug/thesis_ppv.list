
thesis_ppv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002498  08002498  00012498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024bc  080024bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024bc  080024bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024bc  080024bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  080024d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080024d0  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067de  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001635  00000000  00000000  00026813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  00027e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00028520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016493  00000000  00000000  00028b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000764e  00000000  00000000  0003efd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e7d2  00000000  00000000  00046621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4df3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a0c  00000000  00000000  000c4e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002480 	.word	0x08002480

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002480 	.word	0x08002480

0800014c <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000152:	2300      	movs	r3, #0
 8000154:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800015a:	2300      	movs	r3, #0
 800015c:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800015e:	2300      	movs	r3, #0
 8000160:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000162:	2300      	movs	r3, #0
 8000164:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800016a:	2300      	movs	r3, #0
 800016c:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800016e:	2300      	movs	r3, #0
 8000170:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000172:	2300      	movs	r3, #0
 8000174:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000176:	2300      	movs	r3, #0
 8000178:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800017a:	2300      	movs	r3, #0
 800017c:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800017e:	2300      	movs	r3, #0
 8000180:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000182:	2300      	movs	r3, #0
 8000184:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000186:	2308      	movs	r3, #8
 8000188:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800018a:	2300      	movs	r3, #0
 800018c:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000196:	2300      	movs	r3, #0
 8000198:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800019a:	2300      	movs	r3, #0
 800019c:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80001a2:	2300      	movs	r3, #0
 80001a4:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80001a6:	2300      	movs	r3, #0
 80001a8:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80001aa:	2300      	movs	r3, #0
 80001ac:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80001ae:	2300      	movs	r3, #0
 80001b0:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 80001b2:	2300      	movs	r3, #0
 80001b4:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80001b6:	2300      	movs	r3, #0
 80001b8:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80001ba:	2300      	movs	r3, #0
 80001bc:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80001c6:	2308      	movs	r3, #8
 80001c8:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80001ca:	2300      	movs	r3, #0
 80001cc:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 80001d2:	f000 f941 	bl	8000458 <MCP2515_Initialize>
 80001d6:	4603      	mov	r3, r0
 80001d8:	f083 0301 	eor.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <CANSPI_Initialize+0x9a>
  {
    return false;
 80001e2:	2300      	movs	r3, #0
 80001e4:	e05e      	b.n	80002a4 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80001e6:	f000 f959 	bl	800049c <MCP2515_SetConfigMode>
 80001ea:	4603      	mov	r3, r0
 80001ec:	f083 0301 	eor.w	r3, r3, #1
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <CANSPI_Initialize+0xae>
  {
    return false;
 80001f6:	2300      	movs	r3, #0
 80001f8:	e054      	b.n	80002a4 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	461a      	mov	r2, r3
 80001fe:	2123      	movs	r1, #35	; 0x23
 8000200:	2020      	movs	r0, #32
 8000202:	f000 f9ef 	bl	80005e4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000206:	463b      	mov	r3, r7
 8000208:	461a      	mov	r2, r3
 800020a:	2127      	movs	r1, #39	; 0x27
 800020c:	2024      	movs	r0, #36	; 0x24
 800020e:	f000 f9e9 	bl	80005e4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000212:	f107 031c 	add.w	r3, r7, #28
 8000216:	461a      	mov	r2, r3
 8000218:	2103      	movs	r1, #3
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f9e2 	bl	80005e4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000220:	f107 0318 	add.w	r3, r7, #24
 8000224:	461a      	mov	r2, r3
 8000226:	2107      	movs	r1, #7
 8000228:	2004      	movs	r0, #4
 800022a:	f000 f9db 	bl	80005e4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	461a      	mov	r2, r3
 8000234:	210b      	movs	r1, #11
 8000236:	2008      	movs	r0, #8
 8000238:	f000 f9d4 	bl	80005e4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	461a      	mov	r2, r3
 8000242:	2113      	movs	r1, #19
 8000244:	2010      	movs	r0, #16
 8000246:	f000 f9cd 	bl	80005e4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	461a      	mov	r2, r3
 8000250:	2117      	movs	r1, #23
 8000252:	2014      	movs	r0, #20
 8000254:	f000 f9c6 	bl	80005e4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000258:	f107 0308 	add.w	r3, r7, #8
 800025c:	461a      	mov	r2, r3
 800025e:	211b      	movs	r1, #27
 8000260:	2018      	movs	r0, #24
 8000262:	f000 f9bf 	bl	80005e4 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000266:	2104      	movs	r1, #4
 8000268:	2060      	movs	r0, #96	; 0x60
 800026a:	f000 f997 	bl	800059c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800026e:	2101      	movs	r1, #1
 8000270:	2070      	movs	r0, #112	; 0x70
 8000272:	f000 f993 	bl	800059c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000276:	2100      	movs	r1, #0
 8000278:	202a      	movs	r0, #42	; 0x2a
 800027a:	f000 f98f 	bl	800059c <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800027e:	21e5      	movs	r1, #229	; 0xe5
 8000280:	2029      	movs	r0, #41	; 0x29
 8000282:	f000 f98b 	bl	800059c <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000286:	2183      	movs	r1, #131	; 0x83
 8000288:	2028      	movs	r0, #40	; 0x28
 800028a:	f000 f987 	bl	800059c <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800028e:	f000 f923 	bl	80004d8 <MCP2515_SetNormalMode>
 8000292:	4603      	mov	r3, r0
 8000294:	f083 0301 	eor.w	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <CANSPI_Initialize+0x156>
    return false;
 800029e:	2300      	movs	r3, #0
 80002a0:	e000      	b.n	80002a4 <CANSPI_Initialize+0x158>
  
  return true;
 80002a2:	2301      	movs	r3, #1
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3720      	adds	r7, #32
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <CANSPI_Receive>:
  return (returnValue);
}

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80002b8:	f000 f9be 	bl	8000638 <MCP2515_GetRxStatus>
 80002bc:	4603      	mov	r3, r0
 80002be:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80002c0:	7b3b      	ldrb	r3, [r7, #12]
 80002c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d066      	beq.n	800039a <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80002cc:	7b3b      	ldrb	r3, [r7, #12]
 80002ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2b40      	cmp	r3, #64	; 0x40
 80002d6:	bf0c      	ite	eq
 80002d8:	2301      	moveq	r3, #1
 80002da:	2300      	movne	r3, #0
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	7b3b      	ldrb	r3, [r7, #12]
 80002e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2bc0      	cmp	r3, #192	; 0xc0
 80002e8:	bf0c      	ite	eq
 80002ea:	2301      	moveq	r3, #1
 80002ec:	2300      	movne	r3, #0
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	4313      	orrs	r3, r2
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d007      	beq.n	8000308 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	220d      	movs	r2, #13
 80002fe:	4619      	mov	r1, r3
 8000300:	2090      	movs	r0, #144	; 0x90
 8000302:	f000 f929 	bl	8000558 <MCP2515_ReadRxSequence>
 8000306:	e00c      	b.n	8000322 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000308:	7b3b      	ldrb	r3, [r7, #12]
 800030a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800030e:	b2db      	uxtb	r3, r3
 8000310:	2b80      	cmp	r3, #128	; 0x80
 8000312:	d106      	bne.n	8000322 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	220d      	movs	r2, #13
 800031a:	4619      	mov	r1, r3
 800031c:	2094      	movs	r0, #148	; 0x94
 800031e:	f000 f91b 	bl	8000558 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000322:	7b3b      	ldrb	r3, [r7, #12]
 8000324:	f003 0318 	and.w	r3, r3, #24
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b10      	cmp	r3, #16
 800032c:	d10c      	bne.n	8000348 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2202      	movs	r2, #2
 8000332:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000334:	7cb8      	ldrb	r0, [r7, #18]
 8000336:	7cf9      	ldrb	r1, [r7, #19]
 8000338:	7c3a      	ldrb	r2, [r7, #16]
 800033a:	7c7b      	ldrb	r3, [r7, #17]
 800033c:	f000 f832 	bl	80003a4 <convertReg2ExtendedCANid>
 8000340:	4602      	mov	r2, r0
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	e00b      	b.n	8000360 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800034e:	7c3b      	ldrb	r3, [r7, #16]
 8000350:	7c7a      	ldrb	r2, [r7, #17]
 8000352:	4611      	mov	r1, r2
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f863 	bl	8000420 <convertReg2StandardCANid>
 800035a:	4602      	mov	r2, r0
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000360:	7d3a      	ldrb	r2, [r7, #20]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000366:	7d7a      	ldrb	r2, [r7, #21]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 800036c:	7dba      	ldrb	r2, [r7, #22]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000372:	7dfa      	ldrb	r2, [r7, #23]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000378:	7e3a      	ldrb	r2, [r7, #24]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800037e:	7e7a      	ldrb	r2, [r7, #25]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000384:	7eba      	ldrb	r2, [r7, #26]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800038a:	7efa      	ldrb	r2, [r7, #27]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000390:	7f3a      	ldrb	r2, [r7, #28]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 800039a:	7ffb      	ldrb	r3, [r7, #31]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3720      	adds	r7, #32
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4604      	mov	r4, r0
 80003ac:	4608      	mov	r0, r1
 80003ae:	4611      	mov	r1, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	4623      	mov	r3, r4
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	4603      	mov	r3, r0
 80003b8:	71bb      	strb	r3, [r7, #6]
 80003ba:	460b      	mov	r3, r1
 80003bc:	717b      	strb	r3, [r7, #5]
 80003be:	4613      	mov	r3, r2
 80003c0:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80003ca:	793b      	ldrb	r3, [r7, #4]
 80003cc:	f003 0303 	and.w	r3, r3, #3
 80003d0:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80003d2:	793b      	ldrb	r3, [r7, #4]
 80003d4:	095b      	lsrs	r3, r3, #5
 80003d6:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80003d8:	797b      	ldrb	r3, [r7, #5]
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	693a      	ldr	r2, [r7, #16]
 80003e2:	4413      	add	r3, r2
 80003e4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	4413      	add	r3, r2
 80003f2:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	021b      	lsls	r3, r3, #8
 80003f8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	693a      	ldr	r2, [r7, #16]
 80003fe:	4413      	add	r3, r2
 8000400:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	021b      	lsls	r3, r3, #8
 8000406:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	693a      	ldr	r2, [r7, #16]
 800040c:	4413      	add	r3, r2
 800040e:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000414:	697b      	ldr	r3, [r7, #20]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bc90      	pop	{r4, r7}
 800041e:	4770      	bx	lr

08000420 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	460a      	mov	r2, r1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	4613      	mov	r3, r2
 800042e:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	095b      	lsrs	r3, r3, #5
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	4413      	add	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800044c:	68fb      	ldr	r3, [r7, #12]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 800045e:	2201      	movs	r2, #1
 8000460:	2110      	movs	r1, #16
 8000462:	480c      	ldr	r0, [pc, #48]	; (8000494 <MCP2515_Initialize+0x3c>)
 8000464:	f000 fe2e 	bl	80010c4 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8000468:	230a      	movs	r3, #10
 800046a:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800046c:	480a      	ldr	r0, [pc, #40]	; (8000498 <MCP2515_Initialize+0x40>)
 800046e:	f001 fec1 	bl	80021f4 <HAL_SPI_GetState>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	d101      	bne.n	800047c <MCP2515_Initialize+0x24>
      return true;
 8000478:	2301      	movs	r3, #1
 800047a:	e006      	b.n	800048a <MCP2515_Initialize+0x32>
    
    loop--;
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	3b01      	subs	r3, #1
 8000480:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1f1      	bne.n	800046c <MCP2515_Initialize+0x14>
      
  return false;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40010800 	.word	0x40010800
 8000498:	20000028 	.word	0x20000028

0800049c <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	200f      	movs	r0, #15
 80004a6:	f000 f879 	bl	800059c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80004aa:	230a      	movs	r3, #10
 80004ac:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80004ae:	200e      	movs	r0, #14
 80004b0:	f000 f830 	bl	8000514 <MCP2515_ReadByte>
 80004b4:	4603      	mov	r3, r0
 80004b6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80004ba:	2b80      	cmp	r3, #128	; 0x80
 80004bc:	d101      	bne.n	80004c2 <MCP2515_SetConfigMode+0x26>
      return true;
 80004be:	2301      	movs	r3, #1
 80004c0:	e006      	b.n	80004d0 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1ef      	bne.n	80004ae <MCP2515_SetConfigMode+0x12>
  
  return false;
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80004de:	2100      	movs	r1, #0
 80004e0:	200f      	movs	r0, #15
 80004e2:	f000 f85b 	bl	800059c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80004e6:	230a      	movs	r3, #10
 80004e8:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80004ea:	200e      	movs	r0, #14
 80004ec:	f000 f812 	bl	8000514 <MCP2515_ReadByte>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d101      	bne.n	80004fe <MCP2515_SetNormalMode+0x26>
      return true;
 80004fa:	2301      	movs	r3, #1
 80004fc:	e006      	b.n	800050c <MCP2515_SetNormalMode+0x34>
    
    loop--;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	3b01      	subs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1ef      	bne.n	80004ea <MCP2515_SetNormalMode+0x12>
  
  return false;
 800050a:	2300      	movs	r3, #0
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800051e:	2200      	movs	r2, #0
 8000520:	2110      	movs	r1, #16
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <MCP2515_ReadByte+0x40>)
 8000524:	f000 fdce 	bl	80010c4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f8a1 	bl	8000670 <SPI_Tx>
  SPI_Tx(address);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f89d 	bl	8000670 <SPI_Tx>
  retVal = SPI_Rx();
 8000536:	f000 f8c1 	bl	80006bc <SPI_Rx>
 800053a:	4603      	mov	r3, r0
 800053c:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800053e:	2201      	movs	r2, #1
 8000540:	2110      	movs	r1, #16
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <MCP2515_ReadByte+0x40>)
 8000544:	f000 fdbe 	bl	80010c4 <HAL_GPIO_WritePin>
  
  return retVal;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010800 	.word	0x40010800

08000558 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <MCP2515_ReadRxSequence+0x40>)
 800056e:	f000 fda9 	bl	80010c4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f87b 	bl	8000670 <SPI_Tx>
  SPI_RxBuffer(data, length);
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	4619      	mov	r1, r3
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f000 f8ac 	bl	80006dc <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8000584:	2201      	movs	r2, #1
 8000586:	2110      	movs	r1, #16
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <MCP2515_ReadRxSequence+0x40>)
 800058a:	f000 fd9b 	bl	80010c4 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010800 	.word	0x40010800

0800059c <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80005ac:	2200      	movs	r2, #0
 80005ae:	2110      	movs	r1, #16
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MCP2515_WriteByte+0x44>)
 80005b2:	f000 fd87 	bl	80010c4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 f85a 	bl	8000670 <SPI_Tx>
  SPI_Tx(address);
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f856 	bl	8000670 <SPI_Tx>
  SPI_Tx(data);  
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f852 	bl	8000670 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <MCP2515_WriteByte+0x44>)
 80005d2:	f000 fd77 	bl	80010c4 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40010800 	.word	0x40010800

080005e4 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	603a      	str	r2, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	460b      	mov	r3, r1
 80005f2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	480e      	ldr	r0, [pc, #56]	; (8000634 <MCP2515_WriteByteSequence+0x50>)
 80005fa:	f000 fd63 	bl	80010c4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80005fe:	2002      	movs	r0, #2
 8000600:	f000 f836 	bl	8000670 <SPI_Tx>
  SPI_Tx(startAddress);
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f832 	bl	8000670 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 800060c:	79ba      	ldrb	r2, [r7, #6]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	3301      	adds	r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4619      	mov	r1, r3
 800061a:	6838      	ldr	r0, [r7, #0]
 800061c:	f000 f83a 	bl	8000694 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000620:	2201      	movs	r2, #1
 8000622:	2110      	movs	r1, #16
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <MCP2515_WriteByteSequence+0x50>)
 8000626:	f000 fd4d 	bl	80010c4 <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40010800 	.word	0x40010800

08000638 <MCP2515_GetRxStatus>:
  return retVal;
}

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800063e:	2200      	movs	r2, #0
 8000640:	2110      	movs	r1, #16
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <MCP2515_GetRxStatus+0x34>)
 8000644:	f000 fd3e 	bl	80010c4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8000648:	20b0      	movs	r0, #176	; 0xb0
 800064a:	f000 f811 	bl	8000670 <SPI_Tx>
  retVal = SPI_Rx();
 800064e:	f000 f835 	bl	80006bc <SPI_Rx>
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000656:	2201      	movs	r2, #1
 8000658:	2110      	movs	r1, #16
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <MCP2515_GetRxStatus+0x34>)
 800065c:	f000 fd32 	bl	80010c4 <HAL_GPIO_WritePin>
  
  return retVal;
 8000660:	79fb      	ldrb	r3, [r7, #7]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010800 	.word	0x40010800

08000670 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	230a      	movs	r3, #10
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <SPI_Tx+0x20>)
 8000682:	f001 f9b1 	bl	80019e8 <HAL_SPI_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028

08000694 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	230a      	movs	r3, #10
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <SPI_TxBuffer+0x24>)
 80006aa:	f001 f99d 	bl	80019e8 <HAL_SPI_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000028 	.word	0x20000028

080006bc <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80006c2:	1df9      	adds	r1, r7, #7
 80006c4:	230a      	movs	r3, #10
 80006c6:	2201      	movs	r2, #1
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <SPI_Rx+0x1c>)
 80006ca:	f001 fad1 	bl	8001c70 <HAL_SPI_Receive>
  return retVal;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000028 	.word	0x20000028

080006dc <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	230a      	movs	r3, #10
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <SPI_RxBuffer+0x24>)
 80006f2:	f001 fabd 	bl	8001c70 <HAL_SPI_Receive>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000028 	.word	0x20000028

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f000 f9ed 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f831 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f000 f8ab 	bl	800086c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000716:	f000 f873 	bl	8000800 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  CANSPI_Initialize();
 800071a:	f7ff fd17 	bl	800014c <CANSPI_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(CANSPI_Receive(&rxMessage))
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <main+0x64>)
 8000720:	f7ff fdc4 	bl	80002ac <CANSPI_Receive>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d01a      	beq.n	8000760 <main+0x5c>
	{
		if (rxMessage.frame.id == 0x103)
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <main+0x64>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f240 1203 	movw	r2, #259	; 0x103
 8000732:	4293      	cmp	r3, r2
 8000734:	d10f      	bne.n	8000756 <main+0x52>
		{
			int cnt = 10;
 8000736:	230a      	movs	r3, #10
 8000738:	607b      	str	r3, [r7, #4]
			while (cnt--)
 800073a:	e007      	b.n	800074c <main+0x48>
			{
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <main+0x68>)
 8000742:	f000 fcd7 	bl	80010f4 <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f000 fa30 	bl	8000bac <HAL_Delay>
			while (cnt--)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f2      	bne.n	800073c <main+0x38>
			}
		}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <main+0x6c>)
 800075c:	f000 fcca 	bl	80010f4 <HAL_GPIO_TogglePin>
//	txMessage.frame.data5 = 5;
//	txMessage.frame.data6 = 6;
//	txMessage.frame.data7 = 7;
//	CANSPI_Transmit(&txMessage);

	HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 fa23 	bl	8000bac <HAL_Delay>
	if(CANSPI_Receive(&rxMessage))
 8000766:	e7da      	b.n	800071e <main+0x1a>
 8000768:	20000080 	.word	0x20000080
 800076c:	40010800 	.word	0x40010800
 8000770:	40011000 	.word	0x40011000

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b090      	sub	sp, #64	; 0x40
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0318 	add.w	r3, r7, #24
 800077e:	2228      	movs	r2, #40	; 0x28
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fe74 	bl	8002470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fcb3 	bl	8001128 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007c8:	f000 f8b8 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 ff1e 	bl	8001628 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007f2:	f000 f8a3 	bl	800093c <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3740      	adds	r7, #64	; 0x40
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_SPI1_Init+0x64>)
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_SPI1_Init+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI1_Init+0x64>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI1_Init+0x64>)
 8000834:	2210      	movs	r2, #16
 8000836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI1_Init+0x64>)
 800084c:	220a      	movs	r2, #10
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_SPI1_Init+0x64>)
 8000852:	f001 f845 	bl	80018e0 <HAL_SPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800085c:	f000 f86e 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000028 	.word	0x20000028
 8000868:	40013000 	.word	0x40013000

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_GPIO_Init+0xc4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <MX_GPIO_Init+0xc4>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_GPIO_Init+0xc4>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_GPIO_Init+0xc4>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a24      	ldr	r2, [pc, #144]	; (8000930 <MX_GPIO_Init+0xc4>)
 800089e:	f043 0320 	orr.w	r3, r3, #32
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_GPIO_Init+0xc4>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0320 	and.w	r3, r3, #32
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_GPIO_Init+0xc4>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <MX_GPIO_Init+0xc4>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_GPIO_Init+0xc4>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	4819      	ldr	r0, [pc, #100]	; (8000934 <MX_GPIO_Init+0xc8>)
 80008d0:	f000 fbf8 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2110      	movs	r1, #16
 80008d8:	4817      	ldr	r0, [pc, #92]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008da:	f000 fbf3 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008e4:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008e6:	f000 fbed 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0xc8>)
 8000904:	f000 fa5a 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_CS_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin|LED1_Pin|LED2_Pin;
 8000908:	f44f 7344 	mov.w	r3, #784	; 0x310
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_GPIO_Init+0xcc>)
 8000922:	f000 fa4b 	bl	8000dbc <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000
 8000934:	40011000 	.word	0x40011000
 8000938:	40010800 	.word	0x40010800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_MspInit+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_MspInit+0x5c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_MspInit+0x5c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x5c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x5c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x5c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_MspInit+0x60>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_MspInit+0x60>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010000 	.word	0x40010000

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <HAL_SPI_MspInit+0x88>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d12f      	bne.n	8000a2c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 8000a10:	f000 f9d4 	bl	8000dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 8000a28:	f000 f9c8 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40013000 	.word	0x40013000
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 f875 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
	...

08000a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff fff7 	bl	8000a8e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aa2:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a09      	ldr	r2, [pc, #36]	; (8000adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab8:	4c09      	ldr	r4, [pc, #36]	; (8000ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f001 fcaf 	bl	8002428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fe1b 	bl	8000704 <main>
  bx lr
 8000ace:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ad8:	080024c4 	.word	0x080024c4
  ldr r2, =_sbss
 8000adc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae0:	20000098 	.word	0x20000098

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f92b 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff ff20 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f935 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f90b 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x20>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000094 	.word	0x20000094

08000b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000094 	.word	0x20000094

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff0 	bl	8000b98 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffe0 	bl	8000b98 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff49 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb0 	bl	8000d10 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b08b      	sub	sp, #44	; 0x2c
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e169      	b.n	80010a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8158 	bne.w	800109e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a9a      	ldr	r2, [pc, #616]	; (800105c <HAL_GPIO_Init+0x2a0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d05e      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000df8:	4a98      	ldr	r2, [pc, #608]	; (800105c <HAL_GPIO_Init+0x2a0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d875      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000dfe:	4a98      	ldr	r2, [pc, #608]	; (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d058      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e04:	4a96      	ldr	r2, [pc, #600]	; (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d86f      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e0a:	4a96      	ldr	r2, [pc, #600]	; (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d052      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e10:	4a94      	ldr	r2, [pc, #592]	; (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d869      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e16:	4a94      	ldr	r2, [pc, #592]	; (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d04c      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e1c:	4a92      	ldr	r2, [pc, #584]	; (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d863      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e22:	4a92      	ldr	r2, [pc, #584]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d046      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a90      	ldr	r2, [pc, #576]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d85d      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d82a      	bhi.n	8000e88 <HAL_GPIO_Init+0xcc>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d859      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <HAL_GPIO_Init+0x80>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000eb7 	.word	0x08000eb7
 8000e40:	08000e91 	.word	0x08000e91
 8000e44:	08000ea3 	.word	0x08000ea3
 8000e48:	08000ee5 	.word	0x08000ee5
 8000e4c:	08000eeb 	.word	0x08000eeb
 8000e50:	08000eeb 	.word	0x08000eeb
 8000e54:	08000eeb 	.word	0x08000eeb
 8000e58:	08000eeb 	.word	0x08000eeb
 8000e5c:	08000eeb 	.word	0x08000eeb
 8000e60:	08000eeb 	.word	0x08000eeb
 8000e64:	08000eeb 	.word	0x08000eeb
 8000e68:	08000eeb 	.word	0x08000eeb
 8000e6c:	08000eeb 	.word	0x08000eeb
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000eeb 	.word	0x08000eeb
 8000e78:	08000eeb 	.word	0x08000eeb
 8000e7c:	08000eeb 	.word	0x08000eeb
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	4a79      	ldr	r2, [pc, #484]	; (8001070 <HAL_GPIO_Init+0x2b4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8e:	e02c      	b.n	8000eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e029      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	623b      	str	r3, [r7, #32]
          break;
 8000ea0:	e024      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	623b      	str	r3, [r7, #32]
          break;
 8000eaa:	e01f      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e01a      	b.n	8000eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e013      	b.n	8000eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d105      	bne.n	8000ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	611a      	str	r2, [r3, #16]
          break;
 8000ed6:	e009      	b.n	8000eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	615a      	str	r2, [r3, #20]
          break;
 8000ee2:	e003      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x130>
          break;
 8000eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d801      	bhi.n	8000ef6 <HAL_GPIO_Init+0x13a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_Init+0x13e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	; 0xff
 8000f00:	d802      	bhi.n	8000f08 <HAL_GPIO_Init+0x14c>
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x152>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	210f      	movs	r1, #15
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	6a39      	ldr	r1, [r7, #32]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80b1 	beq.w	800109e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b4a      	ldr	r3, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2bc>)
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a40      	ldr	r2, [pc, #256]	; (800107c <HAL_GPIO_Init+0x2c0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d013      	beq.n	8000fa8 <HAL_GPIO_Init+0x1ec>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3f      	ldr	r2, [pc, #252]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d00d      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3e      	ldr	r2, [pc, #248]	; (8001084 <HAL_GPIO_Init+0x2c8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d101      	bne.n	8000f9c <HAL_GPIO_Init+0x1e0>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fba:	492f      	ldr	r1, [pc, #188]	; (8001078 <HAL_GPIO_Init+0x2bc>)
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	492c      	ldr	r1, [pc, #176]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4928      	ldr	r1, [pc, #160]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	4922      	ldr	r1, [pc, #136]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	491e      	ldr	r1, [pc, #120]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4918      	ldr	r1, [pc, #96]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4914      	ldr	r1, [pc, #80]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	490e      	ldr	r1, [pc, #56]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
 8001058:	e021      	b.n	800109e <HAL_GPIO_Init+0x2e2>
 800105a:	bf00      	nop
 800105c:	10320000 	.word	0x10320000
 8001060:	10310000 	.word	0x10310000
 8001064:	10220000 	.word	0x10220000
 8001068:	10210000 	.word	0x10210000
 800106c:	10120000 	.word	0x10120000
 8001070:	10110000 	.word	0x10110000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4909      	ldr	r1, [pc, #36]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800109a:	4013      	ands	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f ae8e 	bne.w	8000dd0 <HAL_GPIO_Init+0x14>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	372c      	adds	r7, #44	; 0x2c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	611a      	str	r2, [r3, #16]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43d9      	mvns	r1, r3
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	400b      	ands	r3, r1
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e26c      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8087 	beq.w	8001256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001148:	4b92      	ldr	r3, [pc, #584]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b04      	cmp	r3, #4
 8001152:	d00c      	beq.n	800116e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001154:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d112      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
 8001160:	4b8c      	ldr	r3, [pc, #560]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d10b      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	4b89      	ldr	r3, [pc, #548]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06c      	beq.n	8001254 <HAL_RCC_OscConfig+0x12c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d168      	bne.n	8001254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e246      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x76>
 8001190:	4b80      	ldr	r3, [pc, #512]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a7f      	ldr	r2, [pc, #508]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e02e      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b7b      	ldr	r3, [pc, #492]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b78      	ldr	r3, [pc, #480]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a77      	ldr	r2, [pc, #476]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0xbc>
 80011ca:	4b72      	ldr	r3, [pc, #456]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a71      	ldr	r2, [pc, #452]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6e      	ldr	r2, [pc, #440]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011e4:	4b6b      	ldr	r3, [pc, #428]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b68      	ldr	r3, [pc, #416]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a67      	ldr	r2, [pc, #412]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fcc8 	bl	8000b98 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fcc4 	bl	8000b98 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1fa      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xe4>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fcb4 	bl	8000b98 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fcb0 	bl	8000b98 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1e6      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x10c>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d063      	beq.n	800132a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1ba      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4939      	ldr	r1, [pc, #228]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e03a      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fc69 	bl	8000b98 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc65 	bl	8000b98 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e19b      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4927      	ldr	r1, [pc, #156]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc48 	bl	8000b98 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fc44 	bl	8000b98 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e17a      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03a      	beq.n	80013ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d019      	beq.n	8001372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_RCC_OscConfig+0x274>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fc28 	bl	8000b98 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fc24 	bl	8000b98 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e15a      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fa9a 	bl	80018a4 <RCC_Delay>
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_RCC_OscConfig+0x274>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fc0e 	bl	8000b98 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137e:	e00f      	b.n	80013a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fc0a 	bl	8000b98 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d908      	bls.n	80013a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e140      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	42420000 	.word	0x42420000
 800139c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b9e      	ldr	r3, [pc, #632]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e9      	bne.n	8001380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a6 	beq.w	8001506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b97      	ldr	r3, [pc, #604]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10d      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b94      	ldr	r3, [pc, #592]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a93      	ldr	r2, [pc, #588]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b91      	ldr	r3, [pc, #580]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b8e      	ldr	r3, [pc, #568]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a8a      	ldr	r2, [pc, #552]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fbcb 	bl	8000b98 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fbc7 	bl	8000b98 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0fd      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b81      	ldr	r3, [pc, #516]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x312>
 800142c:	4b7b      	ldr	r3, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a7a      	ldr	r2, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	e02d      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x334>
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a75      	ldr	r2, [pc, #468]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	4b73      	ldr	r3, [pc, #460]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a72      	ldr	r2, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	e01c      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0x356>
 8001464:	4b6d      	ldr	r3, [pc, #436]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6c      	ldr	r2, [pc, #432]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a69      	ldr	r2, [pc, #420]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a66      	ldr	r2, [pc, #408]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a63      	ldr	r2, [pc, #396]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d015      	beq.n	80014ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb7b 	bl	8000b98 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fb77 	bl	8000b98 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0ab      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ee      	beq.n	80014a6 <HAL_RCC_OscConfig+0x37e>
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fb65 	bl	8000b98 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fb61 	bl	8000b98 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e095      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8081 	beq.w	8001612 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001510:	4b42      	ldr	r3, [pc, #264]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d061      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d146      	bne.n	80015b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <HAL_RCC_OscConfig+0x4fc>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fb35 	bl	8000b98 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fb31 	bl	8000b98 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e067      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	492d      	ldr	r1, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a19      	ldr	r1, [r3, #32]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	430b      	orrs	r3, r1
 800157e:	4927      	ldr	r1, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x4fc>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fb05 	bl	8000b98 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fb01 	bl	8000b98 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e037      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x46a>
 80015b0:	e02f      	b.n	8001612 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_RCC_OscConfig+0x4fc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff faee 	bl	8000b98 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff faea 	bl	8000b98 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e020      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x498>
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e013      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	40007000 	.word	0x40007000
 8001624:	42420060 	.word	0x42420060

08001628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0d0      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d910      	bls.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4965      	ldr	r1, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800168e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d040      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d115      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e073      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4936      	ldr	r1, [pc, #216]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff fa3e 	bl	8000b98 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff fa3a 	bl	8000b98 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e053      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d210      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 0207 	bic.w	r2, r3, #7
 800175e:	4922      	ldr	r1, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1cc>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f99c 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	08002498 	.word	0x08002498
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <HAL_RCC_GetSysClockFreq+0x94>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b04      	cmp	r3, #4
 8001824:	d002      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x30>
 8001826:	2b08      	cmp	r3, #8
 8001828:	d003      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x36>
 800182a:	e027      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800182e:	613b      	str	r3, [r7, #16]
      break;
 8001830:	e027      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0c9b      	lsrs	r3, r3, #18
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <HAL_RCC_GetSysClockFreq+0x9c>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d010      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_RCC_GetSysClockFreq+0x94>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	0c5b      	lsrs	r3, r3, #17
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800185e:	fb02 f203 	mul.w	r2, r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e004      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	613b      	str	r3, [r7, #16]
      break;
 800187a:	e002      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800187e:	613b      	str	r3, [r7, #16]
      break;
 8001880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001882:	693b      	ldr	r3, [r7, #16]
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	007a1200 	.word	0x007a1200
 8001898:	080024a8 	.word	0x080024a8
 800189c:	080024b8 	.word	0x080024b8
 80018a0:	003d0900 	.word	0x003d0900

080018a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <RCC_Delay+0x34>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <RCC_Delay+0x38>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0a5b      	lsrs	r3, r3, #9
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c0:	bf00      	nop
  }
  while (Delay --);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	60fa      	str	r2, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f9      	bne.n	80018c0 <RCC_Delay+0x1c>
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000000 	.word	0x20000000
 80018dc:	10624dd3 	.word	0x10624dd3

080018e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e076      	b.n	80019e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001902:	d009      	beq.n	8001918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
 800190a:	e005      	b.n	8001918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff f83a 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800194e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	ea42 0103 	orr.w	r1, r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	0c1a      	lsrs	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f002 0204 	and.w	r2, r2, #4
 80019be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69da      	ldr	r2, [r3, #28]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019f8:	f7ff f8ce 	bl	8000b98 <HAL_GetTick>
 80019fc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e12a      	b.n	8001c68 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_SPI_Transmit+0x36>
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e122      	b.n	8001c68 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_SPI_Transmit+0x48>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e11b      	b.n	8001c68 <HAL_SPI_Transmit+0x280>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	88fa      	ldrh	r2, [r7, #6]
 8001a50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aaa:	2b40      	cmp	r3, #64	; 0x40
 8001aac:	d007      	beq.n	8001abe <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac6:	d152      	bne.n	8001b6e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_SPI_Transmit+0xee>
 8001ad0:	8b7b      	ldrh	r3, [r7, #26]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d145      	bne.n	8001b62 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	1c9a      	adds	r2, r3, #2
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001afa:	e032      	b.n	8001b62 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d112      	bne.n	8001b30 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	1c9a      	adds	r2, r3, #2
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b2e:	e018      	b.n	8001b62 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b30:	f7ff f832 	bl	8000b98 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d803      	bhi.n	8001b48 <HAL_SPI_Transmit+0x160>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b46:	d102      	bne.n	8001b4e <HAL_SPI_Transmit+0x166>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e082      	b.n	8001c68 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1c7      	bne.n	8001afc <HAL_SPI_Transmit+0x114>
 8001b6c:	e053      	b.n	8001c16 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_SPI_Transmit+0x194>
 8001b76:	8b7b      	ldrh	r3, [r7, #26]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d147      	bne.n	8001c0c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330c      	adds	r3, #12
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ba2:	e033      	b.n	8001c0c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d113      	bne.n	8001bda <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	330c      	adds	r3, #12
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bd8:	e018      	b.n	8001c0c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bda:	f7fe ffdd 	bl	8000b98 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d803      	bhi.n	8001bf2 <HAL_SPI_Transmit+0x20a>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d102      	bne.n	8001bf8 <HAL_SPI_Transmit+0x210>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e02d      	b.n	8001c68 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1c6      	bne.n	8001ba4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	6839      	ldr	r1, [r7, #0]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fbd2 	bl	80023c4 <SPI_EndRxTxTransaction>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10a      	bne.n	8001c4a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
  }
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d001      	beq.n	8001c90 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e104      	b.n	8001e9a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c98:	d112      	bne.n	8001cc0 <HAL_SPI_Receive+0x50>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f8f3 	bl	8001ea2 <HAL_SPI_TransmitReceive>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	e0ec      	b.n	8001e9a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cc0:	f7fe ff6a 	bl	8000b98 <HAL_GetTick>
 8001cc4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HAL_SPI_Receive+0x62>
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0e1      	b.n	8001e9a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_SPI_Receive+0x74>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0da      	b.n	8001e9a <HAL_SPI_Receive+0x22a>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d32:	d10f      	bne.n	8001d54 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b40      	cmp	r3, #64	; 0x40
 8001d60:	d007      	beq.n	8001d72 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d170      	bne.n	8001e5c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d7a:	e035      	b.n	8001de8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d115      	bne.n	8001db6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f103 020c 	add.w	r2, r3, #12
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001db4:	e018      	b.n	8001de8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001db6:	f7fe feef 	bl	8000b98 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d803      	bhi.n	8001dce <HAL_SPI_Receive+0x15e>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d102      	bne.n	8001dd4 <HAL_SPI_Receive+0x164>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e058      	b.n	8001e9a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1c4      	bne.n	8001d7c <HAL_SPI_Receive+0x10c>
 8001df2:	e038      	b.n	8001e66 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d113      	bne.n	8001e2a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	1c9a      	adds	r2, r3, #2
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e28:	e018      	b.n	8001e5c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e2a:	f7fe feb5 	bl	8000b98 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d803      	bhi.n	8001e42 <HAL_SPI_Receive+0x1d2>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d102      	bne.n	8001e48 <HAL_SPI_Receive+0x1d8>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d109      	bne.n	8001e5c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e01e      	b.n	8001e9a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1c6      	bne.n	8001df4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fa58 	bl	8002320 <SPI_EndRxTransaction>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
  }
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b08a      	sub	sp, #40	; 0x28
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001eb4:	f7fe fe70 	bl	8000b98 <HAL_GetTick>
 8001eb8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ec0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d00c      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x4a>
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ed8:	d106      	bne.n	8001ee8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_SPI_TransmitReceive+0x46>
 8001ee2:	7ffb      	ldrb	r3, [r7, #31]
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d001      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e17f      	b.n	80021ec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_SPI_TransmitReceive+0x5c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_TransmitReceive+0x5c>
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e174      	b.n	80021ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_SPI_TransmitReceive+0x6e>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e16d      	b.n	80021ec <HAL_SPI_TransmitReceive+0x34a>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d003      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2205      	movs	r2, #5
 8001f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	887a      	ldrh	r2, [r7, #2]
 8001f42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	887a      	ldrh	r2, [r7, #2]
 8001f4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d007      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f88:	d17e      	bne.n	8002088 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_SPI_TransmitReceive+0xf6>
 8001f92:	8afb      	ldrh	r3, [r7, #22]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d16c      	bne.n	8002072 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	1c9a      	adds	r2, r3, #2
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fbc:	e059      	b.n	8002072 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d11b      	bne.n	8002004 <HAL_SPI_TransmitReceive+0x162>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_SPI_TransmitReceive+0x162>
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d113      	bne.n	8002004 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	1c9a      	adds	r2, r3, #2
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d119      	bne.n	8002046 <HAL_SPI_TransmitReceive+0x1a4>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d014      	beq.n	8002046 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	b292      	uxth	r2, r2
 8002028:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	1c9a      	adds	r2, r3, #2
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002042:	2301      	movs	r3, #1
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002046:	f7fe fda7 	bl	8000b98 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002052:	429a      	cmp	r2, r3
 8002054:	d80d      	bhi.n	8002072 <HAL_SPI_TransmitReceive+0x1d0>
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d009      	beq.n	8002072 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0bc      	b.n	80021ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002076:	b29b      	uxth	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1a0      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x11c>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d19b      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x11c>
 8002086:	e082      	b.n	800218e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <HAL_SPI_TransmitReceive+0x1f4>
 8002090:	8afb      	ldrh	r3, [r7, #22]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d171      	bne.n	800217a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	330c      	adds	r3, #12
 80020a0:	7812      	ldrb	r2, [r2, #0]
 80020a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020bc:	e05d      	b.n	800217a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d11c      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x264>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d017      	beq.n	8002106 <HAL_SPI_TransmitReceive+0x264>
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d114      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	330c      	adds	r3, #12
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d119      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x2a6>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d014      	beq.n	8002148 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002144:	2301      	movs	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002148:	f7fe fd26 	bl	8000b98 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002154:	429a      	cmp	r2, r3
 8002156:	d803      	bhi.n	8002160 <HAL_SPI_TransmitReceive+0x2be>
 8002158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d102      	bne.n	8002166 <HAL_SPI_TransmitReceive+0x2c4>
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e038      	b.n	80021ec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217e:	b29b      	uxth	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d19c      	bne.n	80020be <HAL_SPI_TransmitReceive+0x21c>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d197      	bne.n	80020be <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800218e:	6a3a      	ldr	r2, [r7, #32]
 8002190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f916 	bl	80023c4 <SPI_EndRxTxTransaction>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e01d      	b.n	80021ec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002202:	b2db      	uxtb	r3, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
	...

08002210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002220:	f7fe fcba 	bl	8000b98 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4413      	add	r3, r2
 800222e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002230:	f7fe fcb2 	bl	8000b98 <HAL_GetTick>
 8002234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	015b      	lsls	r3, r3, #5
 800223c:	0d1b      	lsrs	r3, r3, #20
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002246:	e054      	b.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d050      	beq.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002250:	f7fe fca2 	bl	8000b98 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	429a      	cmp	r2, r3
 800225e:	d902      	bls.n	8002266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d13d      	bne.n	80022e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800227e:	d111      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002288:	d004      	beq.n	8002294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002292:	d107      	bne.n	80022a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ac:	d10f      	bne.n	80022ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e017      	b.n	8002312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4013      	ands	r3, r2
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	429a      	cmp	r2, r3
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	429a      	cmp	r2, r3
 800230e:	d19b      	bne.n	8002248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000

08002320 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002334:	d111      	bne.n	800235a <SPI_EndRxTransaction+0x3a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233e:	d004      	beq.n	800234a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002348:	d107      	bne.n	800235a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002358:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002362:	d117      	bne.n	8002394 <SPI_EndRxTransaction+0x74>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236c:	d112      	bne.n	8002394 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2200      	movs	r2, #0
 8002376:	2101      	movs	r1, #1
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7ff ff49 	bl	8002210 <SPI_WaitFlagStateUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01a      	beq.n	80023ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e013      	b.n	80023bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff ff36 	bl	8002210 <SPI_WaitFlagStateUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e000      	b.n	80023bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2201      	movs	r2, #1
 80023d8:	2102      	movs	r1, #2
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f7ff ff18 	bl	8002210 <SPI_WaitFlagStateUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e013      	b.n	800241e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff ff05 	bl	8002210 <SPI_WaitFlagStateUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f043 0220 	orr.w	r2, r3, #32
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e000      	b.n	800241e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <__libc_init_array>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	2600      	movs	r6, #0
 800242c:	4d0c      	ldr	r5, [pc, #48]	; (8002460 <__libc_init_array+0x38>)
 800242e:	4c0d      	ldr	r4, [pc, #52]	; (8002464 <__libc_init_array+0x3c>)
 8002430:	1b64      	subs	r4, r4, r5
 8002432:	10a4      	asrs	r4, r4, #2
 8002434:	42a6      	cmp	r6, r4
 8002436:	d109      	bne.n	800244c <__libc_init_array+0x24>
 8002438:	f000 f822 	bl	8002480 <_init>
 800243c:	2600      	movs	r6, #0
 800243e:	4d0a      	ldr	r5, [pc, #40]	; (8002468 <__libc_init_array+0x40>)
 8002440:	4c0a      	ldr	r4, [pc, #40]	; (800246c <__libc_init_array+0x44>)
 8002442:	1b64      	subs	r4, r4, r5
 8002444:	10a4      	asrs	r4, r4, #2
 8002446:	42a6      	cmp	r6, r4
 8002448:	d105      	bne.n	8002456 <__libc_init_array+0x2e>
 800244a:	bd70      	pop	{r4, r5, r6, pc}
 800244c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002450:	4798      	blx	r3
 8002452:	3601      	adds	r6, #1
 8002454:	e7ee      	b.n	8002434 <__libc_init_array+0xc>
 8002456:	f855 3b04 	ldr.w	r3, [r5], #4
 800245a:	4798      	blx	r3
 800245c:	3601      	adds	r6, #1
 800245e:	e7f2      	b.n	8002446 <__libc_init_array+0x1e>
 8002460:	080024bc 	.word	0x080024bc
 8002464:	080024bc 	.word	0x080024bc
 8002468:	080024bc 	.word	0x080024bc
 800246c:	080024c0 	.word	0x080024c0

08002470 <memset>:
 8002470:	4603      	mov	r3, r0
 8002472:	4402      	add	r2, r0
 8002474:	4293      	cmp	r3, r2
 8002476:	d100      	bne.n	800247a <memset+0xa>
 8002478:	4770      	bx	lr
 800247a:	f803 1b01 	strb.w	r1, [r3], #1
 800247e:	e7f9      	b.n	8002474 <memset+0x4>

08002480 <_init>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	bf00      	nop
 8002484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002486:	bc08      	pop	{r3}
 8002488:	469e      	mov	lr, r3
 800248a:	4770      	bx	lr

0800248c <_fini>:
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248e:	bf00      	nop
 8002490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002492:	bc08      	pop	{r3}
 8002494:	469e      	mov	lr, r3
 8002496:	4770      	bx	lr
